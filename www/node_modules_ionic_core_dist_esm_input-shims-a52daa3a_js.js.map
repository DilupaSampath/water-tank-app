{"version":3,"file":"node_modules_ionic_core_dist_esm_input-shims-a52daa3a_js.js","mappings":"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","sources":["./node_modules/@ionic/core/dist/esm/input-shims-a52daa3a.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { w as win, d as doc } from './index-a5d50daf.js';\nimport { g as getScrollElement, c as scrollByPoint, f as findClosestIonContent } from './index-f3946ac1.js';\nimport { a as addEventListener, b as removeEventListener, r as raf, c as componentOnReady } from './helpers-be245865.js';\nimport { a as KeyboardResize, K as Keyboard } from './keyboard-73175e24.js';\nimport './index-9b0d46f4.js';\nimport './capacitor-59395cbd.js';\n\nconst cloneMap = new WeakMap();\nconst relocateInput = (componentEl, inputEl, shouldRelocate, inputRelativeY = 0, disabledClonedInput = false) => {\n    if (cloneMap.has(componentEl) === shouldRelocate) {\n        return;\n    }\n    if (shouldRelocate) {\n        addClone(componentEl, inputEl, inputRelativeY, disabledClonedInput);\n    }\n    else {\n        removeClone(componentEl, inputEl);\n    }\n};\nconst isFocused = (input) => {\n    /**\n     * https://developer.mozilla.org/en-US/docs/Web/API/Node/getRootNode\n     * Calling getRootNode on an element in standard web page will return HTMLDocument.\n     * Calling getRootNode on an element inside of the Shadow DOM will return the associated ShadowRoot.\n     * Calling getRootNode on an element that is not attached to a document/shadow tree will return\n     * the root of the DOM tree it belongs to.\n     * isFocused is used for the hide-caret utility which only considers input/textarea elements\n     * that are present in the DOM, so we don't set types for that final case since it does not apply.\n     */\n    return input === input.getRootNode().activeElement;\n};\nconst addClone = (componentEl, inputEl, inputRelativeY, disabledClonedInput = false) => {\n    // this allows for the actual input to receive the focus from\n    // the user's touch event, but before it receives focus, it\n    // moves the actual input to a location that will not screw\n    // up the app's layout, and does not allow the native browser\n    // to attempt to scroll the input into place (messing up headers/footers)\n    // the cloned input fills the area of where native input should be\n    // while the native input fakes out the browser by relocating itself\n    // before it receives the actual focus event\n    // We hide the focused input (with the visible caret) invisible by making it scale(0),\n    const parentEl = inputEl.parentNode;\n    // DOM WRITES\n    const clonedEl = inputEl.cloneNode(false);\n    clonedEl.classList.add('cloned-input');\n    clonedEl.tabIndex = -1;\n    /**\n     * Making the cloned input disabled prevents\n     * Chrome for Android from still scrolling\n     * the entire page since this cloned input\n     * will briefly be hidden by the keyboard\n     * even though it is not focused.\n     *\n     * This is not needed on iOS. While this\n     * does not cause functional issues on iOS,\n     * the input still appears slightly dimmed even\n     * if we set opacity: 1.\n     */\n    if (disabledClonedInput) {\n        clonedEl.disabled = true;\n    }\n    parentEl.appendChild(clonedEl);\n    cloneMap.set(componentEl, clonedEl);\n    const doc = componentEl.ownerDocument;\n    const tx = doc.dir === 'rtl' ? 9999 : -9999;\n    componentEl.style.pointerEvents = 'none';\n    inputEl.style.transform = `translate3d(${tx}px,${inputRelativeY}px,0) scale(0)`;\n};\nconst removeClone = (componentEl, inputEl) => {\n    const clone = cloneMap.get(componentEl);\n    if (clone) {\n        cloneMap.delete(componentEl);\n        clone.remove();\n    }\n    componentEl.style.pointerEvents = '';\n    inputEl.style.transform = '';\n};\n/**\n * Factoring in 50px gives us some room\n * in case the keyboard shows password/autofill bars\n * asynchronously.\n */\nconst SCROLL_AMOUNT_PADDING = 50;\n\nconst enableHideCaretOnScroll = (componentEl, inputEl, scrollEl) => {\n    if (!scrollEl || !inputEl) {\n        return () => {\n            return;\n        };\n    }\n    const scrollHideCaret = (shouldHideCaret) => {\n        if (isFocused(inputEl)) {\n            relocateInput(componentEl, inputEl, shouldHideCaret);\n        }\n    };\n    const onBlur = () => relocateInput(componentEl, inputEl, false);\n    const hideCaret = () => scrollHideCaret(true);\n    const showCaret = () => scrollHideCaret(false);\n    addEventListener(scrollEl, 'ionScrollStart', hideCaret);\n    addEventListener(scrollEl, 'ionScrollEnd', showCaret);\n    inputEl.addEventListener('blur', onBlur);\n    return () => {\n        removeEventListener(scrollEl, 'ionScrollStart', hideCaret);\n        removeEventListener(scrollEl, 'ionScrollEnd', showCaret);\n        inputEl.removeEventListener('blur', onBlur);\n    };\n};\n\nconst SKIP_SELECTOR = 'input, textarea, [no-blur], [contenteditable]';\nconst enableInputBlurring = () => {\n    let focused = true;\n    let didScroll = false;\n    const doc = document;\n    const onScroll = () => {\n        didScroll = true;\n    };\n    const onFocusin = () => {\n        focused = true;\n    };\n    const onTouchend = (ev) => {\n        // if app did scroll return early\n        if (didScroll) {\n            didScroll = false;\n            return;\n        }\n        const active = doc.activeElement;\n        if (!active) {\n            return;\n        }\n        // only blur if the active element is a text-input or a textarea\n        if (active.matches(SKIP_SELECTOR)) {\n            return;\n        }\n        // if the selected target is the active element, do not blur\n        const tapped = ev.target;\n        if (tapped === active) {\n            return;\n        }\n        if (tapped.matches(SKIP_SELECTOR) || tapped.closest(SKIP_SELECTOR)) {\n            return;\n        }\n        focused = false;\n        // TODO FW-2796: find a better way, why 50ms?\n        setTimeout(() => {\n            if (!focused) {\n                active.blur();\n            }\n        }, 50);\n    };\n    addEventListener(doc, 'ionScrollStart', onScroll);\n    doc.addEventListener('focusin', onFocusin, true);\n    doc.addEventListener('touchend', onTouchend, false);\n    return () => {\n        removeEventListener(doc, 'ionScrollStart', onScroll, true);\n        doc.removeEventListener('focusin', onFocusin, true);\n        doc.removeEventListener('touchend', onTouchend, false);\n    };\n};\n\nconst SCROLL_ASSIST_SPEED = 0.3;\nconst getScrollData = (componentEl, contentEl, keyboardHeight, platformHeight) => {\n    var _a;\n    const itemEl = (_a = componentEl.closest('ion-item,[ion-item]')) !== null && _a !== void 0 ? _a : componentEl;\n    return calcScrollData(itemEl.getBoundingClientRect(), contentEl.getBoundingClientRect(), keyboardHeight, platformHeight);\n};\nconst calcScrollData = (inputRect, contentRect, keyboardHeight, platformHeight) => {\n    // compute input's Y values relative to the body\n    const inputTop = inputRect.top;\n    const inputBottom = inputRect.bottom;\n    // compute visible area\n    const visibleAreaTop = contentRect.top;\n    const visibleAreaBottom = Math.min(contentRect.bottom, platformHeight - keyboardHeight);\n    // compute safe area\n    const safeAreaTop = visibleAreaTop + 15;\n    const safeAreaBottom = visibleAreaBottom - SCROLL_AMOUNT_PADDING;\n    // figure out if each edge of the input is within the safe area\n    const distanceToBottom = safeAreaBottom - inputBottom;\n    const distanceToTop = safeAreaTop - inputTop;\n    // desiredScrollAmount is the negated distance to the safe area according to our calculations.\n    const desiredScrollAmount = Math.round(distanceToBottom < 0 ? -distanceToBottom : distanceToTop > 0 ? -distanceToTop : 0);\n    // our calculations make some assumptions that aren't always true, like the keyboard being closed when an input\n    // gets focus, so make sure we don't scroll the input above the visible area\n    const scrollAmount = Math.min(desiredScrollAmount, inputTop - visibleAreaTop);\n    const distance = Math.abs(scrollAmount);\n    const duration = distance / SCROLL_ASSIST_SPEED;\n    const scrollDuration = Math.min(400, Math.max(150, duration));\n    return {\n        scrollAmount,\n        scrollDuration,\n        scrollPadding: keyboardHeight,\n        inputSafeY: -(inputTop - safeAreaTop) + 4,\n    };\n};\n\nconst PADDING_TIMER_KEY = '$ionPaddingTimer';\n/**\n * Scroll padding adds additional padding to the bottom\n * of ion-content so that there is enough scroll space\n * for an input to be scrolled above the keyboard. This\n * is needed in environments where the webview does not\n * resize when the keyboard opens.\n *\n * Example: If an input at the bottom of ion-content is\n * focused, there is no additional scrolling space below\n * it, so the input cannot be scrolled above the keyboard.\n * Scroll padding fixes this by adding padding equal to the\n * height of the keyboard to the bottom of the content.\n *\n * Common environments where this is needed:\n * - Mobile Safari: The keyboard overlays the content\n * - Capacitor/Cordova on iOS: The keyboard overlays the content\n * when the KeyboardResize mode is set to 'none'.\n */\nconst setScrollPadding = (contentEl, paddingAmount, clearCallback) => {\n    const timer = contentEl[PADDING_TIMER_KEY];\n    if (timer) {\n        clearTimeout(timer);\n    }\n    if (paddingAmount > 0) {\n        contentEl.style.setProperty('--keyboard-offset', `${paddingAmount}px`);\n    }\n    else {\n        contentEl[PADDING_TIMER_KEY] = setTimeout(() => {\n            contentEl.style.setProperty('--keyboard-offset', '0px');\n            if (clearCallback) {\n                clearCallback();\n            }\n        }, 120);\n    }\n};\n/**\n * When an input is about to be focused,\n * set a timeout to clear any scroll padding\n * on the content. Note: The clearing\n * is done on a timeout so that if users\n * are moving focus from one input to the next\n * then re-adding scroll padding to the new\n * input with cancel the timeout to clear the\n * scroll padding.\n */\nconst setClearScrollPaddingListener = (inputEl, contentEl, doneCallback) => {\n    const clearScrollPadding = () => {\n        if (contentEl) {\n            setScrollPadding(contentEl, 0, doneCallback);\n        }\n    };\n    inputEl.addEventListener('focusout', clearScrollPadding, { once: true });\n};\n\nlet currentPadding = 0;\nconst SKIP_SCROLL_ASSIST = 'data-ionic-skip-scroll-assist';\nconst enableScrollAssist = (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, keyboardResize, disableClonedInput = false) => {\n    /**\n     * Scroll padding should only be added if:\n     * 1. The global scrollPadding config option\n     * is set to true.\n     * 2. The native keyboard resize mode is either \"none\"\n     * (keyboard overlays webview) or undefined (resize\n     * information unavailable)\n     * Resize info is available on Capacitor 4+\n     */\n    const addScrollPadding = enableScrollPadding && (keyboardResize === undefined || keyboardResize.mode === KeyboardResize.None);\n    /**\n     * This tracks whether or not the keyboard has been\n     * presented for a single focused text field. Note\n     * that it does not track if the keyboard is open\n     * in general such as if the keyboard is open for\n     * a different focused text field.\n     */\n    let hasKeyboardBeenPresentedForTextField = false;\n    /**\n     * When adding scroll padding we need to know\n     * how much of the viewport the keyboard obscures.\n     * We do this by subtracting the keyboard height\n     * from the platform height.\n     *\n     * If we compute this value when switching between\n     * inputs then the webview may already be resized.\n     * At this point, `win.innerHeight` has already accounted\n     * for the keyboard meaning we would then subtract\n     * the keyboard height again. This will result in the input\n     * being scrolled more than it needs to.\n     */\n    const platformHeight = win !== undefined ? win.innerHeight : 0;\n    /**\n     * Scroll assist is run when a text field\n     * is focused. However, it may need to\n     * re-run when the keyboard size changes\n     * such that the text field is now hidden\n     * underneath the keyboard.\n     * This function re-runs scroll assist\n     * when that happens.\n     *\n     * One limitation of this is on a web browser\n     * where native keyboard APIs do not have cross-browser\n     * support. `ionKeyboardDidShow` relies on the Visual Viewport API.\n     * This means that if the keyboard changes but does not change\n     * geometry, then scroll assist will not re-run even if\n     * the user has scrolled the text field under the keyboard.\n     * This is not a problem when running in Cordova/Capacitor\n     * because `ionKeyboardDidShow` uses the native events\n     * which fire every time the keyboard changes.\n     */\n    const keyboardShow = (ev) => {\n        /**\n         * If the keyboard has not yet been presented\n         * for this text field then the text field has just\n         * received focus. In that case, the focusin listener\n         * will run scroll assist.\n         */\n        if (hasKeyboardBeenPresentedForTextField === false) {\n            hasKeyboardBeenPresentedForTextField = true;\n            return;\n        }\n        /**\n         * Otherwise, the keyboard has already been presented\n         * for the focused text field.\n         * This means that the keyboard likely changed\n         * geometry, and we need to re-run scroll assist.\n         * This can happen when the user rotates their device\n         * or when they switch keyboards.\n         *\n         * Make sure we pass in the computed keyboard height\n         * rather than the estimated keyboard height.\n         *\n         * Since the keyboard is already open then we do not\n         * need to wait for the webview to resize, so we pass\n         * \"waitForResize: false\".\n         */\n        jsSetFocus(componentEl, inputEl, contentEl, footerEl, ev.detail.keyboardHeight, addScrollPadding, disableClonedInput, platformHeight, false);\n    };\n    /**\n     * Reset the internal state when the text field loses focus.\n     */\n    const focusOut = () => {\n        hasKeyboardBeenPresentedForTextField = false;\n        win === null || win === void 0 ? void 0 : win.removeEventListener('ionKeyboardDidShow', keyboardShow);\n        componentEl.removeEventListener('focusout', focusOut);\n    };\n    /**\n     * When the input is about to receive\n     * focus, we need to move it to prevent\n     * mobile Safari from adjusting the viewport.\n     */\n    const focusIn = async () => {\n        /**\n         * Scroll assist should not run again\n         * on inputs that have been manually\n         * focused inside of the scroll assist\n         * implementation.\n         */\n        if (inputEl.hasAttribute(SKIP_SCROLL_ASSIST)) {\n            inputEl.removeAttribute(SKIP_SCROLL_ASSIST);\n            return;\n        }\n        jsSetFocus(componentEl, inputEl, contentEl, footerEl, keyboardHeight, addScrollPadding, disableClonedInput, platformHeight);\n        win === null || win === void 0 ? void 0 : win.addEventListener('ionKeyboardDidShow', keyboardShow);\n        componentEl.addEventListener('focusout', focusOut);\n    };\n    componentEl.addEventListener('focusin', focusIn);\n    return () => {\n        componentEl.removeEventListener('focusin', focusIn);\n        win === null || win === void 0 ? void 0 : win.removeEventListener('ionKeyboardDidShow', keyboardShow);\n        componentEl.removeEventListener('focusout', focusOut);\n    };\n};\n/**\n * Use this function when you want to manually\n * focus an input but not have scroll assist run again.\n */\nconst setManualFocus = (el) => {\n    /**\n     * If element is already focused then\n     * a new focusin event will not be dispatched\n     * to remove the SKIL_SCROLL_ASSIST attribute.\n     */\n    if (document.activeElement === el) {\n        return;\n    }\n    el.setAttribute(SKIP_SCROLL_ASSIST, 'true');\n    el.focus();\n};\nconst jsSetFocus = async (componentEl, inputEl, contentEl, footerEl, keyboardHeight, enableScrollPadding, disableClonedInput = false, platformHeight = 0, waitForResize = true) => {\n    if (!contentEl && !footerEl) {\n        return;\n    }\n    const scrollData = getScrollData(componentEl, (contentEl || footerEl), keyboardHeight, platformHeight);\n    if (contentEl && Math.abs(scrollData.scrollAmount) < 4) {\n        // the text input is in a safe position that doesn't\n        // require it to be scrolled into view, just set focus now\n        setManualFocus(inputEl);\n        /**\n         * Even though the input does not need\n         * scroll assist, we should preserve the\n         * the scroll padding as users could be moving\n         * focus from an input that needs scroll padding\n         * to an input that does not need scroll padding.\n         * If we remove the scroll padding now, users will\n         * see the page jump.\n         */\n        if (enableScrollPadding && contentEl !== null) {\n            setScrollPadding(contentEl, currentPadding);\n            setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n        }\n        return;\n    }\n    // temporarily move the focus to the focus holder so the browser\n    // doesn't freak out while it's trying to get the input in place\n    // at this point the native text input still does not have focus\n    relocateInput(componentEl, inputEl, true, scrollData.inputSafeY, disableClonedInput);\n    setManualFocus(inputEl);\n    /**\n     * Relocating/Focusing input causes the\n     * click event to be cancelled, so\n     * manually fire one here.\n     */\n    raf(() => componentEl.click());\n    /**\n     * If enabled, we can add scroll padding to\n     * the bottom of the content so that scroll assist\n     * has enough room to scroll the input above\n     * the keyboard.\n     */\n    if (enableScrollPadding && contentEl) {\n        currentPadding = scrollData.scrollPadding;\n        setScrollPadding(contentEl, currentPadding);\n    }\n    if (typeof window !== 'undefined') {\n        let scrollContentTimeout;\n        const scrollContent = async () => {\n            // clean up listeners and timeouts\n            if (scrollContentTimeout !== undefined) {\n                clearTimeout(scrollContentTimeout);\n            }\n            window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n            window.removeEventListener('ionKeyboardDidShow', scrollContent);\n            // scroll the input into place\n            if (contentEl) {\n                await scrollByPoint(contentEl, 0, scrollData.scrollAmount, scrollData.scrollDuration);\n            }\n            // the scroll view is in the correct position now\n            // give the native text input focus\n            relocateInput(componentEl, inputEl, false, scrollData.inputSafeY);\n            // ensure this is the focused input\n            setManualFocus(inputEl);\n            /**\n             * When the input is about to be blurred\n             * we should set a timeout to remove\n             * any scroll padding.\n             */\n            if (enableScrollPadding) {\n                setClearScrollPaddingListener(inputEl, contentEl, () => (currentPadding = 0));\n            }\n        };\n        const doubleKeyboardEventListener = () => {\n            window.removeEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n            window.addEventListener('ionKeyboardDidShow', scrollContent);\n        };\n        if (contentEl) {\n            const scrollEl = await getScrollElement(contentEl);\n            /**\n             * scrollData will only consider the amount we need\n             * to scroll in order to properly bring the input\n             * into view. It will not consider the amount\n             * we can scroll in the content element.\n             * As a result, scrollData may request a greater\n             * scroll position than is currently available\n             * in the DOM. If this is the case, we need to\n             * wait for the webview to resize/the keyboard\n             * to show in order for additional scroll\n             * bandwidth to become available.\n             */\n            const totalScrollAmount = scrollEl.scrollHeight - scrollEl.clientHeight;\n            if (waitForResize && scrollData.scrollAmount > totalScrollAmount - scrollEl.scrollTop) {\n                /**\n                 * On iOS devices, the system will show a \"Passwords\" bar above the keyboard\n                 * after the initial keyboard is shown. This prevents the webview from resizing\n                 * until the \"Passwords\" bar is shown, so we need to wait for that to happen first.\n                 */\n                if (inputEl.type === 'password') {\n                    // Add 50px to account for the \"Passwords\" bar\n                    scrollData.scrollAmount += SCROLL_AMOUNT_PADDING;\n                    window.addEventListener('ionKeyboardDidShow', doubleKeyboardEventListener);\n                }\n                else {\n                    window.addEventListener('ionKeyboardDidShow', scrollContent);\n                }\n                /**\n                 * This should only fire in 2 instances:\n                 * 1. The app is very slow.\n                 * 2. The app is running in a browser on an old OS\n                 * that does not support Ionic Keyboard Events\n                 */\n                scrollContentTimeout = setTimeout(scrollContent, 1000);\n                return;\n            }\n        }\n        scrollContent();\n    }\n};\n\nconst INPUT_BLURRING = true;\nconst startInputShims = async (config, platform) => {\n    /**\n     * If doc is undefined then we are in an SSR environment\n     * where input shims do not apply.\n     */\n    if (doc === undefined) {\n        return;\n    }\n    const isIOS = platform === 'ios';\n    const isAndroid = platform === 'android';\n    /**\n     * Hide Caret and Input Blurring are needed on iOS.\n     * Scroll Assist and Scroll Padding are needed on iOS and Android\n     * with Chrome web browser (not Chrome webview).\n     */\n    const keyboardHeight = config.getNumber('keyboardHeight', 290);\n    const scrollAssist = config.getBoolean('scrollAssist', true);\n    const hideCaret = config.getBoolean('hideCaretOnScroll', isIOS);\n    const inputBlurring = config.getBoolean('inputBlurring', isIOS);\n    const scrollPadding = config.getBoolean('scrollPadding', true);\n    const inputs = Array.from(doc.querySelectorAll('ion-input, ion-textarea'));\n    const hideCaretMap = new WeakMap();\n    const scrollAssistMap = new WeakMap();\n    /**\n     * Grab the native keyboard resize configuration\n     * and pass it to scroll assist. Scroll assist requires\n     * that we adjust the input right before the input\n     * is about to be focused. If we called `Keyboard.getResizeMode`\n     * on focusin in scroll assist, we could potentially adjust the\n     * input too late since this call is async.\n     */\n    const keyboardResizeMode = await Keyboard.getResizeMode();\n    const registerInput = async (componentEl) => {\n        await new Promise((resolve) => componentOnReady(componentEl, resolve));\n        const inputRoot = componentEl.shadowRoot || componentEl;\n        const inputEl = inputRoot.querySelector('input') || inputRoot.querySelector('textarea');\n        const scrollEl = findClosestIonContent(componentEl);\n        const footerEl = !scrollEl ? componentEl.closest('ion-footer') : null;\n        if (!inputEl) {\n            return;\n        }\n        if (!!scrollEl && hideCaret && !hideCaretMap.has(componentEl)) {\n            const rmFn = enableHideCaretOnScroll(componentEl, inputEl, scrollEl);\n            hideCaretMap.set(componentEl, rmFn);\n        }\n        /**\n         * date/datetime-locale inputs on mobile devices show date picker\n         * overlays instead of keyboards. As a result, scroll assist is\n         * not needed. This also works around a bug in iOS <16 where\n         * scroll assist causes the browser to lock up. See FW-1997.\n         */\n        const isDateInput = inputEl.type === 'date' || inputEl.type === 'datetime-local';\n        if (!isDateInput &&\n            (!!scrollEl || !!footerEl) &&\n            scrollAssist &&\n            !scrollAssistMap.has(componentEl)) {\n            const rmFn = enableScrollAssist(componentEl, inputEl, scrollEl, footerEl, keyboardHeight, scrollPadding, keyboardResizeMode, isAndroid);\n            scrollAssistMap.set(componentEl, rmFn);\n        }\n    };\n    const unregisterInput = (componentEl) => {\n        if (hideCaret) {\n            const fn = hideCaretMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            hideCaretMap.delete(componentEl);\n        }\n        if (scrollAssist) {\n            const fn = scrollAssistMap.get(componentEl);\n            if (fn) {\n                fn();\n            }\n            scrollAssistMap.delete(componentEl);\n        }\n    };\n    if (inputBlurring && INPUT_BLURRING) {\n        enableInputBlurring();\n    }\n    // Input might be already loaded in the DOM before ion-device-hacks did.\n    // At this point we need to look for all of the inputs not registered yet\n    // and register them.\n    for (const input of inputs) {\n        registerInput(input);\n    }\n    doc.addEventListener('ionInputDidLoad', (ev) => {\n        registerInput(ev.detail);\n    });\n    doc.addEventListener('ionInputDidUnload', (ev) => {\n        unregisterInput(ev.detail);\n    });\n};\n\nexport { startInputShims };\n"],"names":["w","win","d","doc","g","getScrollElement","c","scrollByPoint","f","findClosestIonContent","a","addEventListener","b","removeEventListener","r","raf","componentOnReady","KeyboardResize","K","Keyboard","cloneMap","WeakMap","relocateInput","componentEl","inputEl","shouldRelocate","inputRelativeY","disabledClonedInput","has","addClone","removeClone","isFocused","input","getRootNode","activeElement","parentEl","parentNode","clonedEl","cloneNode","classList","add","tabIndex","disabled","appendChild","set","ownerDocument","tx","dir","style","pointerEvents","transform","clone","get","delete","remove","SCROLL_AMOUNT_PADDING","enableHideCaretOnScroll","scrollEl","scrollHideCaret","shouldHideCaret","onBlur","hideCaret","showCaret","SKIP_SELECTOR","enableInputBlurring","focused","didScroll","document","onScroll","onFocusin","onTouchend","ev","active","matches","tapped","target","closest","setTimeout","blur","SCROLL_ASSIST_SPEED","getScrollData","contentEl","keyboardHeight","platformHeight","_a","itemEl","calcScrollData","getBoundingClientRect","inputRect","contentRect","inputTop","top","inputBottom","bottom","visibleAreaTop","visibleAreaBottom","Math","min","safeAreaTop","safeAreaBottom","distanceToBottom","distanceToTop","desiredScrollAmount","round","scrollAmount","distance","abs","duration","scrollDuration","max","scrollPadding","inputSafeY","PADDING_TIMER_KEY","setScrollPadding","paddingAmount","clearCallback","timer","clearTimeout","setProperty","setClearScrollPaddingListener","doneCallback","clearScrollPadding","once","currentPadding","SKIP_SCROLL_ASSIST","enableScrollAssist","footerEl","enableScrollPadding","keyboardResize","disableClonedInput","addScrollPadding","undefined","mode","None","hasKeyboardBeenPresentedForTextField","innerHeight","keyboardShow","jsSetFocus","detail","focusOut","focusIn","hasAttribute","removeAttribute","setManualFocus","el","setAttribute","focus","waitForResize","scrollData","click","window","scrollContentTimeout","scrollContent","doubleKeyboardEventListener","totalScrollAmount","scrollHeight","clientHeight","scrollTop","type","INPUT_BLURRING","startInputShims","config","platform","isIOS","isAndroid","getNumber","scrollAssist","getBoolean","inputBlurring","inputs","Array","from","querySelectorAll","hideCaretMap","scrollAssistMap","keyboardResizeMode","getResizeMode","registerInput","Promise","resolve","inputRoot","shadowRoot","querySelector","rmFn","isDateInput","unregisterInput","fn"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}