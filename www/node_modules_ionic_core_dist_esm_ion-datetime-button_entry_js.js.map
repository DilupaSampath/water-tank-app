{"version":3,"file":"node_modules_ionic_core_dist_esm_ion-datetime-button_entry_js.js","mappings":"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","sources":["./node_modules/@ionic/core/dist/esm/ion-datetime-button.entry.js"],"sourcesContent":["/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, f as getElement } from './index-a1a47f01.js';\nimport { a as addEventListener, c as componentOnReady } from './helpers-be245865.js';\nimport { a as printIonError } from './index-9b0d46f4.js';\nimport { c as createColorClasses } from './theme-01f3f29c.js';\nimport { b as getIonMode } from './ionic-global-94f25d1b.js';\nimport { s as parseDate, x as getToday, L as getHourCycle, N as getLocalizedDateTime, M as getLocalizedTime } from './data-bb424ba8.js';\n\nconst iosDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:1rem;cursor:pointer;overflow:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\nconst IonDatetimeButtonIosStyle0 = iosDatetimeButtonCss;\n\nconst mdDatetimeButtonCss = \":host{display:-ms-flexbox;display:flex;-ms-flex-wrap:wrap;flex-wrap:wrap;-ms-flex-align:center;align-items:center;-ms-flex-pack:center;justify-content:center}:host button{border-radius:8px;-webkit-padding-start:12px;padding-inline-start:12px;-webkit-padding-end:12px;padding-inline-end:12px;padding-top:6px;padding-bottom:6px;-webkit-margin-start:2px;margin-inline-start:2px;-webkit-margin-end:2px;margin-inline-end:2px;margin-top:0px;margin-bottom:0px;position:relative;-webkit-transition:150ms color ease-in-out;transition:150ms color ease-in-out;border:none;background:var(--ion-color-step-300, #edeef0);color:var(--ion-text-color, #000);font-family:inherit;font-size:1rem;cursor:pointer;overflow:hidden;-webkit-appearance:none;-moz-appearance:none;appearance:none}:host(.time-active) #time-button,:host(.date-active) #date-button{color:var(--ion-color-base)}:host(.datetime-button-disabled){pointer-events:none}:host(.datetime-button-disabled) button{opacity:0.4}\";\nconst IonDatetimeButtonMdStyle0 = mdDatetimeButtonCss;\n\nconst DatetimeButton = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.datetimeEl = null;\n        this.overlayEl = null;\n        /**\n         * Accepts one or more string values and converts\n         * them to DatetimeParts. This is done so datetime-button\n         * can work with an array internally and not need\n         * to keep checking if the datetime value is `string` or `string[]`.\n         */\n        this.getParsedDateValues = (value) => {\n            if (value === undefined || value === null) {\n                return [];\n            }\n            if (Array.isArray(value)) {\n                return value;\n            }\n            return [value];\n        };\n        /**\n         * Check the value property on the linked\n         * ion-datetime and then format it according\n         * to the locale specified on ion-datetime.\n         */\n        this.setDateTimeText = () => {\n            var _a, _b, _c, _d, _e;\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            const { value, locale, formatOptions, hourCycle, preferWheel, multiple, titleSelectedDatesFormatter } = datetimeEl;\n            const parsedValues = this.getParsedDateValues(value);\n            /**\n             * Both ion-datetime and ion-datetime-button default\n             * to today's date and time if no value is set.\n             */\n            const parsedDatetimes = parseDate(parsedValues.length > 0 ? parsedValues : [getToday()]);\n            if (!parsedDatetimes) {\n                return;\n            }\n            /**\n             * If developers incorrectly use multiple=\"true\"\n             * with non \"date\" datetimes, then just select\n             * the first value so the interface does\n             * not appear broken. Datetime will provide a\n             * warning in the console.\n             */\n            const firstParsedDatetime = parsedDatetimes[0];\n            const computedHourCycle = getHourCycle(locale, hourCycle);\n            this.dateText = this.timeText = undefined;\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_a = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _a !== void 0 ? _a : { month: 'short', day: 'numeric', year: 'numeric' });\n                    const timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time);\n                    if (preferWheel) {\n                        this.dateText = `${dateText} ${timeText}`;\n                    }\n                    else {\n                        this.dateText = dateText;\n                        this.timeText = timeText;\n                    }\n                    break;\n                case 'date':\n                    if (multiple && parsedValues.length !== 1) {\n                        let headerText = `${parsedValues.length} days`; // default/fallback for multiple selection\n                        if (titleSelectedDatesFormatter !== undefined) {\n                            try {\n                                headerText = titleSelectedDatesFormatter(parsedValues);\n                            }\n                            catch (e) {\n                                printIonError('Exception in provided `titleSelectedDatesFormatter`: ', e);\n                            }\n                        }\n                        this.dateText = headerText;\n                    }\n                    else {\n                        this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_b = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _b !== void 0 ? _b : { month: 'short', day: 'numeric', year: 'numeric' });\n                    }\n                    break;\n                case 'time':\n                    this.timeText = getLocalizedTime(locale, firstParsedDatetime, computedHourCycle, formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time);\n                    break;\n                case 'month-year':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_c = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.date) !== null && _c !== void 0 ? _c : { month: 'long', year: 'numeric' });\n                    break;\n                case 'month':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_d = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) !== null && _d !== void 0 ? _d : { month: 'long' });\n                    break;\n                case 'year':\n                    this.dateText = getLocalizedDateTime(locale, firstParsedDatetime, (_e = formatOptions === null || formatOptions === void 0 ? void 0 : formatOptions.time) !== null && _e !== void 0 ? _e : { year: 'numeric' });\n                    break;\n            }\n        };\n        /**\n         * Waits for the ion-datetime to re-render.\n         * This is needed in order to correctly position\n         * a popover relative to the trigger element.\n         */\n        this.waitForDatetimeChanges = async () => {\n            const { datetimeEl } = this;\n            if (!datetimeEl) {\n                return Promise.resolve();\n            }\n            return new Promise((resolve) => {\n                addEventListener(datetimeEl, 'ionRender', resolve, { once: true });\n            });\n        };\n        this.handleDateClick = async (ev) => {\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            let needsPresentationChange = false;\n            /**\n             * When clicking the date button,\n             * we need to make sure that only a date\n             * picker is displayed. For presentation styles\n             * that display content other than a date picker,\n             * we need to update the presentation style.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const needsChange = datetimeEl.presentation !== 'date';\n                    /**\n                     * The date+time wheel picker\n                     * shows date and time together,\n                     * so do not adjust the presentation\n                     * in that case.\n                     */\n                    if (!datetimeEl.preferWheel && needsChange) {\n                        datetimeEl.presentation = 'date';\n                        needsPresentationChange = true;\n                    }\n                    break;\n            }\n            /**\n             * Track which button was clicked\n             * so that it can have the correct\n             * activated styles applied when\n             * the modal/popover containing\n             * the datetime is opened.\n             */\n            this.selectedButton = 'date';\n            this.presentOverlay(ev, needsPresentationChange, this.dateTargetEl);\n        };\n        this.handleTimeClick = (ev) => {\n            const { datetimeEl, datetimePresentation } = this;\n            if (!datetimeEl) {\n                return;\n            }\n            let needsPresentationChange = false;\n            /**\n             * When clicking the time button,\n             * we need to make sure that only a time\n             * picker is displayed. For presentation styles\n             * that display content other than a time picker,\n             * we need to update the presentation style.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'time-date':\n                    const needsChange = datetimeEl.presentation !== 'time';\n                    if (needsChange) {\n                        datetimeEl.presentation = 'time';\n                        needsPresentationChange = true;\n                    }\n                    break;\n            }\n            /**\n             * Track which button was clicked\n             * so that it can have the correct\n             * activated styles applied when\n             * the modal/popover containing\n             * the datetime is opened.\n             */\n            this.selectedButton = 'time';\n            this.presentOverlay(ev, needsPresentationChange, this.timeTargetEl);\n        };\n        /**\n         * If the datetime is presented in an\n         * overlay, the datetime and overlay\n         * should be appropriately sized.\n         * These classes provide default sizing values\n         * that developers can customize.\n         * The goal is to provide an overlay that is\n         * reasonably sized with a datetime that\n         * fills the entire container.\n         */\n        this.presentOverlay = async (ev, needsPresentationChange, triggerEl) => {\n            const { overlayEl } = this;\n            if (!overlayEl) {\n                return;\n            }\n            if (overlayEl.tagName === 'ION-POPOVER') {\n                /**\n                 * When the presentation on datetime changes,\n                 * we need to wait for the component to re-render\n                 * otherwise the computed width/height of the\n                 * popover content will be wrong, causing\n                 * the popover to not align with the trigger element.\n                 */\n                if (needsPresentationChange) {\n                    await this.waitForDatetimeChanges();\n                }\n                /**\n                 * We pass the trigger button element\n                 * so that the popover aligns with the individual\n                 * button that was clicked, not the component container.\n                 */\n                overlayEl.present(Object.assign(Object.assign({}, ev), { detail: {\n                        ionShadowTarget: triggerEl,\n                    } }));\n            }\n            else {\n                overlayEl.present();\n            }\n        };\n        this.datetimePresentation = 'date-time';\n        this.dateText = undefined;\n        this.timeText = undefined;\n        this.datetimeActive = false;\n        this.selectedButton = undefined;\n        this.color = 'primary';\n        this.disabled = false;\n        this.datetime = undefined;\n    }\n    async componentWillLoad() {\n        const { datetime } = this;\n        if (!datetime) {\n            printIonError('An ID associated with an ion-datetime instance is required for ion-datetime-button to function properly.', this.el);\n            return;\n        }\n        const datetimeEl = (this.datetimeEl = document.getElementById(datetime));\n        if (!datetimeEl) {\n            printIonError(`No ion-datetime instance found for ID '${datetime}'.`, this.el);\n            return;\n        }\n        /**\n         * The element reference must be an ion-datetime. Print an error\n         * if a non-datetime element was provided.\n         */\n        if (datetimeEl.tagName !== 'ION-DATETIME') {\n            printIonError(`Expected an ion-datetime instance for ID '${datetime}' but received '${datetimeEl.tagName.toLowerCase()}' instead.`, datetimeEl);\n            return;\n        }\n        /**\n         * Since the datetime can be used in any context (overlays, accordion, etc)\n         * we track when it is visible to determine when it is active.\n         * This informs which button is highlighted as well as the\n         * aria-expanded state.\n         */\n        const io = new IntersectionObserver((entries) => {\n            const ev = entries[0];\n            this.datetimeActive = ev.isIntersecting;\n        }, {\n            threshold: 0.01,\n        });\n        io.observe(datetimeEl);\n        /**\n         * Get a reference to any modal/popover\n         * the datetime is being used in so we can\n         * correctly size it when it is presented.\n         */\n        const overlayEl = (this.overlayEl = datetimeEl.closest('ion-modal, ion-popover'));\n        /**\n         * The .ion-datetime-button-overlay class contains\n         * styles that allow any modal/popover to be\n         * sized according to the dimensions of the datetime.\n         * If developers want a smaller/larger overlay all they need\n         * to do is change the width/height of the datetime.\n         * Additionally, this lets us avoid having to set\n         * explicit widths on each variant of datetime.\n         */\n        if (overlayEl) {\n            overlayEl.classList.add('ion-datetime-button-overlay');\n        }\n        componentOnReady(datetimeEl, () => {\n            const datetimePresentation = (this.datetimePresentation = datetimeEl.presentation || 'date-time');\n            /**\n             * Set the initial display\n             * in the rendered buttons.\n             *\n             * From there, we need to listen\n             * for ionChange to be emitted\n             * from datetime so we know when\n             * to re-render the displayed\n             * text in the buttons.\n             */\n            this.setDateTimeText();\n            addEventListener(datetimeEl, 'ionValueChange', this.setDateTimeText);\n            /**\n             * Configure the initial selected button\n             * in the event that the datetime is displayed\n             * without clicking one of the datetime buttons.\n             * For example, a datetime could be expanded\n             * in an accordion. In this case users only\n             * need to click the accordion header to show\n             * the datetime.\n             */\n            switch (datetimePresentation) {\n                case 'date-time':\n                case 'date':\n                case 'month-year':\n                case 'month':\n                case 'year':\n                    this.selectedButton = 'date';\n                    break;\n                case 'time-date':\n                case 'time':\n                    this.selectedButton = 'time';\n                    break;\n            }\n        });\n    }\n    render() {\n        const { color, dateText, timeText, selectedButton, datetimeActive, disabled } = this;\n        const mode = getIonMode(this);\n        return (h(Host, { key: 'ab6c21a4c185dee71c8f14cafad82e38831c68d0', class: createColorClasses(color, {\n                [mode]: true,\n                [`${selectedButton}-active`]: datetimeActive,\n                ['datetime-button-disabled']: disabled,\n            }) }, dateText && (h(\"button\", { key: 'cbda6f3386c3714567a04b5a97a96c71d59822c8', class: \"ion-activatable\", id: \"date-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleDateClick, disabled: disabled, part: \"native\", ref: (el) => (this.dateTargetEl = el) }, h(\"slot\", { key: 'a00ff431512827bfef8c02982ef37099b2f21508', name: \"date-target\" }, dateText), mode === 'md' && h(\"ion-ripple-effect\", { key: '67935989628a2ed0492edb813fb0475bfd88abe7' }))), timeText && (h(\"button\", { key: '4207c94de5bece91b8388332e0192d1756403e62', class: \"ion-activatable\", id: \"time-button\", \"aria-expanded\": datetimeActive ? 'true' : 'false', onClick: this.handleTimeClick, disabled: disabled, part: \"native\", ref: (el) => (this.timeTargetEl = el) }, h(\"slot\", { key: '9ffa7ef4417571933bd1757950ec805c49704759', name: \"time-target\" }, timeText), mode === 'md' && h(\"ion-ripple-effect\", { key: 'fbcad00cf828c9719074d1d06f4e13246b28903e' })))));\n    }\n    get el() { return getElement(this); }\n};\nDatetimeButton.style = {\n    ios: IonDatetimeButtonIosStyle0,\n    md: IonDatetimeButtonMdStyle0\n};\n\nexport { DatetimeButton as ion_datetime_button };\n"],"names":["r","registerInstance","h","H","Host","f","getElement","a","addEventListener","c","componentOnReady","printIonError","createColorClasses","b","getIonMode","s","parseDate","x","getToday","L","getHourCycle","N","getLocalizedDateTime","M","getLocalizedTime","iosDatetimeButtonCss","IonDatetimeButtonIosStyle0","mdDatetimeButtonCss","IonDatetimeButtonMdStyle0","DatetimeButton","constructor","hostRef","datetimeEl","overlayEl","getParsedDateValues","value","undefined","Array","isArray","setDateTimeText","_a","_b","_c","_d","_e","datetimePresentation","locale","formatOptions","hourCycle","preferWheel","multiple","titleSelectedDatesFormatter","parsedValues","parsedDatetimes","length","firstParsedDatetime","computedHourCycle","dateText","timeText","date","month","day","year","time","headerText","e","waitForDatetimeChanges","Promise","resolve","once","handleDateClick","ev","needsPresentationChange","needsChange","presentation","selectedButton","presentOverlay","dateTargetEl","handleTimeClick","timeTargetEl","triggerEl","tagName","present","Object","assign","detail","ionShadowTarget","datetimeActive","color","disabled","datetime","componentWillLoad","el","document","getElementById","toLowerCase","io","IntersectionObserver","entries","isIntersecting","threshold","observe","closest","classList","add","render","mode","key","class","id","onClick","part","ref","name","style","ios","md","ion_datetime_button"],"sourceRoot":"webpack:///","x_google_ignoreList":[0]}